// Specifies the path where the log files are created.
// This setting is optional and if ommitted, the log files are
// are created in the same directory that the logger DLL resides in.
LOG_FILE_PATH "C:\SDK_log_files\"

// Format for global log specification:
// GLOBAL [log channel options] [logging priority] [Log file size limit in MB] [Number of log files to keep] [Log statement format]  
// [log channel options] ~= 'c', 'a', 'm', 'g', 'u'
//    c - log to the console
//    a - log to the master log file
//    m - log to the module log file
//    g - log to the group log file(s)
//    u - log to the unique (module + group) log file
// [logging priority] ~= [Error, Information, Trace]
// [Log file size limit in MB] ~= specifies an integral limit in MB for the log file size.
//    All surplus log statements will be sent to a newly created log file with a name that
//    is derived from the original log file name.
//    This setting is optional - if it is ommitted, then the log file is allowed to grow
//    unbounded.
// [Number of log files to keep] ~= specifies the number of log files of this type to preserve.
//    If the number of log files exceeds this number, the logger will delete extra log files to
//    maintain this log file count.  The logger will always delete the oldest log files first.
//    This setting is optional - if it is omitted, then the number of log files are allowed to
//    proliferate unbounded.
// [Log statement format] ~= 'n', 'd', 'm', 'p', 'l', 't'
//    n - include the sequence number
//    d - include the date/time stamp
//    m - include the module name
//    p - include the log priority
//    t - include the thread ID
//    l - include the source file location
//    This setting is optional.  If it is ommitted, none of the above
//    metadata is prepended to the log statement.
//
// NOTE: The global settings will override the corresponding settings for group and module
//       loggers with the exception of the log file size limit.  The global log file size limit
//       does NOT override any other limit settings.
GLOBAL camgu Trace ndmplt

// Format for group log specification:
// GROUP [logging priority] [Log file size limit in MB] [Number of log files to keep] [Log statement format]  
// [logging priority] ~= [Error, Information, Trace]
// [Log file size limit in MB] ~= specifies an integral limit in MB for the log file size.
//    All surplus log statements will be sent to a newly created log file with a name that
//    is derived from the original log file name.
//    This setting is optional - if it is ommitted, then the log file is allowed to grow
//    unbounded.
// [Number of log files to keep] ~= specifies the number of log files of this type to preserve.
//    If the number of log files exceeds this number, the logger will delete extra log files to
//    maintain this log file count.  The logger will always delete the oldest log files first.
//    This setting is optional - if it is omitted, then the number of log files are allowed to
//    proliferate unbounded.
// [Log statement format] ~= 'n', 'd', 'm', 'p', 'l', 't'
//    n - include the sequence number
//    d - include the date/time stamp
//    m - include the module name
//    p - include the log priority
//    t - include the thread ID
//    l - include the source file location
//    This setting is optional.  If it is ommitted, none of the above
//    metadata is prepended to the log statement.
GROUP Trace ndmplt

// Format for console log specification:
// CONSOLE [logging priority] [Log statement format]  
// [logging priority] ~= [Error, Information, Trace]
// [Log statement format] ~= 'n', 'd', 'm', 'p', 'l', 't'
//    This setting is optional.  If it is ommitted, none of the above
//    metadata is prepended to the log statement.
CONSOLE Trace ndmplt

// Format for a log module:
// [Module name] [log channel options] [logging priority] [Log file size limit in MB] [Number of log files to keep] [Log statement format] [[function filter]]
// [log channel options] ~= 'c', 'a', 'm', 'g', 'u'
//    c - log to the console
//    a - log to the master log file
//    m - log to the module log file
//    g - log to the group log file(s)
//    u - log to the unique (module + group) log file
// [logging priority] ~= [Error, Information, Trace]
// [Log file size limit in MB] ~= specifies an integral limit in MB for the log file size.
//    All surplus log statements will be sent to a newly created log file with a name that
//    is derived from the original log file name.
//    This setting is optional - if it is ommitted, then the log file is allowed to grow
//    unbounded.
// [Number of log files to keep] ~= specifies the number of log files of this type to preserve.
//    If the number of log files exceeds this number, the logger will delete extra log files to
//    maintain this log file count.  The logger will always delete the oldest log files first.
//    This setting is optional - if it is omitted, then the number of log files are allowed to
//    proliferate unbounded.
// [Log statement format] ~= 'n', 'd', 'm', 'p', 'l', 't'
//    n - include the sequence number
//    d - include the date/time stamp
//    m - include the module name
//    p - include the log priority
//    t - include the thread ID
//    l - include the source file location
//    This setting is optional.  If it is ommitted, none of the above
//    metadata is prepended to the log statement.
// [[function filter]] ~= a comma separated list of function names.  The function names
//    must exactly match the implementation dependent __FUNCTION__ macro expansion.
//    An empty function filter includes all functions.  A non-empty list logs statements
//    from only those functions.
::MODULE_1 camgu Trace ndmplt []
::MODULE_2 camgu Trace ndmplt []

import numpy as np
import json

metadata = {
    'protocolName': 'SnBiGe',
    'author': 'Rishi Kumar',
    'source': 'FRG',
    'apiLevel': '2.8'
    }

dispense_str = '{"A1": {"destination_wells": ["A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "B10", "B11", "B12", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11", "C12", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10", "E11", "E12", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "G10", "G11", "G12", "H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8", "H9", "H10", "H11", "H12"], "transfer_volumes": [3.3e-05, 3.3e-05, 6.7e-05, 6.7e-05, 0.000102, 0.000102, 0.000135, 0.000135, 3.5e-05, 3.5e-05, 7.1e-05, 7.1e-05, 0.000107, 0.000107, 0.000142, 0.000142, 3.2e-05, 3.2e-05, 6.3e-05, 6.3e-05, 9.6e-05, 9.6e-05, 0.000128, 0.000128, 3e-05, 3e-05, 6e-05, 6e-05, 9e-05, 9e-05, 0.00012, 0.00012, 3.3e-05, 3.3e-05, 6.7e-05, 6.7e-05, 0.000102, 0.000102, 0.000135, 0.000135, 3e-05, 3e-05, 6e-05, 6e-05, 9e-05, 9e-05, 0.00012, 0.00012, 3.2e-05, 3.2e-05, 6.3e-05, 6.3e-05, 9.6e-05, 9.6e-05, 0.000128, 0.000128, 3e-05, 3e-05, 6e-05, 6e-05, 9e-05, 9e-05, 0.00012, 0.00012, 3.5e-05, 3.5e-05, 7.1e-05, 7.1e-05, 0.000107, 0.000107, 0.000142, 0.000142, 3.3e-05, 3.3e-05, 6.7e-05, 6.7e-05, 0.000102, 0.000102, 0.000135, 0.000135, 3e-05, 3e-05, 6e-05, 6e-05, 9e-05, 9e-05, 0.00012, 0.00012, 3.7e-05, 3.7e-05, 7.4e-05, 7.4e-05, 0.000113, 0.000113, 0.00015, 0.00015]}, "A2": {"destination_wells": ["A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "B10", "B11", "B12", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11", "C12", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10", "E11", "E12", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "G10", "G11", "G12", "H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8", "H9", "H10", "H11", "H12"], "transfer_volumes": [2e-06, 2e-06, 4e-06, 4e-06, 6e-06, 6e-06, 7e-06, 7e-06, 2e-06, 2e-06, 4e-06, 4e-06, 6e-06, 6e-06, 7e-06, 7e-06, 4e-06, 4e-06, 7e-06, 7e-06, 1.1e-05, 1.1e-05, 1.5e-05, 1.5e-05, 4e-06, 4e-06, 7e-06, 7e-06, 1.1e-05, 1.1e-05, 1.5e-05, 1.5e-05, 4e-06, 4e-06, 7e-06, 7e-06, 1.1e-05, 1.1e-05, 1.5e-05, 1.5e-05, 6e-06, 6e-06, 1.1e-05, 1.1e-05, 1.7e-05, 1.7e-05, 2.2e-05, 2.2e-05, 6e-06, 6e-06, 1.1e-05, 1.1e-05, 1.7e-05, 1.7e-05, 2.2e-05, 2.2e-05, 7e-06, 7e-06, 1.5e-05, 1.5e-05, 2.3e-05, 2.3e-05, 3e-05, 3e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "A3": {"destination_wells": ["A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "B10", "B11", "B12", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11", "C12", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10", "E11", "E12", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "G10", "G11", "G12", "H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8", "H9", "H10", "H11", "H12"], "transfer_volumes": [2e-06, 2e-06, 4e-06, 4e-06, 6e-06, 6e-06, 7e-06, 7e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2e-06, 2e-06, 4e-06, 4e-06, 6e-06, 6e-06, 7e-06, 7e-06, 4e-06, 4e-06, 7e-06, 7e-06, 1.1e-05, 1.1e-05, 1.5e-05, 1.5e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2e-06, 2e-06, 4e-06, 4e-06, 6e-06, 6e-06, 7e-06, 7e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2e-06, 2e-06, 4e-06, 4e-06, 6e-06, 6e-06, 7e-06, 7e-06, 4e-06, 4e-06, 7e-06, 7e-06, 1.1e-05, 1.1e-05, 1.5e-05, 1.5e-05, 7e-06, 7e-06, 1.5e-05, 1.5e-05, 2.3e-05, 2.3e-05, 3e-05, 3e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "B1": {"destination_wells": ["A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "B10", "B11", "B12", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11", "C12", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10", "E11", "E12", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "G10", "G11", "G12", "H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8", "H9", "H10", "H11", "H12"], "transfer_volumes": [0.000113, 0.000113, 7.6e-05, 7.6e-05, 3.7e-05, 3.7e-05, 0.0, 0.0, 0.000113, 0.000113, 7.6e-05, 7.6e-05, 3.7e-05, 3.7e-05, 0.0, 0.0, 0.000113, 0.000113, 7.6e-05, 7.6e-05, 3.7e-05, 3.7e-05, 0.0, 0.0, 0.000113, 0.000113, 7.6e-05, 7.6e-05, 3.7e-05, 3.7e-05, 0.0, 0.0, 0.000113, 0.000113, 7.6e-05, 7.6e-05, 3.7e-05, 3.7e-05, 0.0, 0.0, 0.000113, 0.000113, 7.6e-05, 7.6e-05, 3.7e-05, 3.7e-05, 0.0, 0.0, 0.000113, 0.000113, 7.6e-05, 7.6e-05, 3.7e-05, 3.7e-05, 0.0, 0.0, 0.000113, 0.000113, 7.6e-05, 7.6e-05, 3.7e-05, 3.7e-05, 0.0, 0.0, 0.000113, 0.000113, 7.6e-05, 7.6e-05, 3.7e-05, 3.7e-05, 0.0, 0.0, 0.000113, 0.000113, 7.6e-05, 7.6e-05, 3.7e-05, 3.7e-05, 0.0, 0.0, 0.000113, 0.000113, 7.6e-05, 7.6e-05, 3.7e-05, 3.7e-05, 0.0, 0.0, 0.000113, 0.000113, 7.6e-05, 7.6e-05, 3.7e-05, 3.7e-05, 0.0, 0.0]}}'

def run(protocol_context): 
    tipracks = [
      protocol_context.load_labware('opentrons_96_tiprack_300ul', slot)
      for slot in ['4']
      ]

    stock = protocol_context.load_labware('frg_12_wellplate_15000ul', '1')

    mix = protocol_context.load_labware('corning_96_wellplate_360ul_flat', '2')

    pipettes = [
      protocol_context.load_instrument('p300_single_gen2', side, tip_racks=tipracks)
      for side in ['left']
      ]
    pipettes[0].well_bottom_clearance.aspirate = 1.5

    dispenses = json.loads(dispense_str)
    # for p in pipettes:
    #     p.min_volume = 0 #pipettes will always overfill by this number.
    
    # spincoater = protocol_context.load_labware('frg_spincoater_v1', '6') #has two locations defined as "wells", called "standby" and "chuck"

    for source, vals in dispenses.items():
        pipettes[0].distribute(
            [v*1e6 for v in vals['transfer_volumes']], #convert L to uL
            stock.wells(source),
            mix.wells(*vals['destination_wells']),
            touch_tip = False,
            blow_out = True,
            disposal_volume = 5
            # trash = False
            )
